{"ast":null,"code":"export default function calculatePayments(initial, years, rate, monthlyOverpayment) {\n  var overpayments = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var monthlyRatePct = rate / 1200;\n  var monthlyPayment = monthlyRatePct === 0 ? initial / years / 12 : initial * monthlyRatePct / (1 - Math.pow(1 / (1 + monthlyRatePct), years * 12));\n  var balance = initial;\n  var baseline = initial;\n  var payments = [{\n    overpayment: 0,\n    balance: balance,\n    baseline: baseline\n  }];\n  var partial;\n\n  var _loop = function _loop(year) {\n    var interestYearly = 0;\n    var overpaymentYearly = 0;\n\n    var _loop2 = function _loop2(month) {\n      var overpayment = overpayments.filter(function (x) {\n        return +x.year === year && +x.month === month;\n      }).reduce(function (acc, val) {\n        return acc + +val.amount;\n      }, 0);\n      var interestMonth = balance * monthlyRatePct;\n      interestYearly += interestMonth;\n      overpaymentYearly += overpayment;\n      balance -= monthlyPayment + monthlyOverpayment + overpayment - interestMonth;\n      baseline -= monthlyPayment - baseline * monthlyRatePct;\n\n      if (balance <= 0) {\n        balance = 0;\n\n        if (partial === undefined && month !== 12) {\n          partial = month;\n        }\n      }\n    };\n\n    for (var month = 1; month <= 12; month++) {\n      _loop2(month);\n    }\n\n    payments.push({\n      baseline: baseline,\n      interestYearly: interestYearly,\n      balance: balance,\n      partial: partial,\n      overpayment: overpaymentYearly + +monthlyOverpayment * (partial || 12)\n    });\n    if (partial) partial = 0;\n  };\n\n  for (var year = 0; year < years; year++) {\n    _loop(year);\n  }\n\n  return {\n    monthlyPayment: monthlyPayment,\n    payments: payments\n  };\n}","map":{"version":3,"names":["calculatePayments","initial","years","rate","monthlyOverpayment","overpayments","monthlyRatePct","monthlyPayment","Math","pow","balance","baseline","payments","overpayment","partial","year","interestYearly","overpaymentYearly","month","filter","x","reduce","acc","val","amount","interestMonth","undefined","push"],"sources":["/Users/khalednached/Downloads/apps/mortgage/src/calculations.js"],"sourcesContent":["export default function calculatePayments(\r\n  initial,\r\n  years,\r\n  rate,\r\n  monthlyOverpayment,\r\n  overpayments = []\r\n) {\r\n  const monthlyRatePct = rate / 1200;\r\n  const monthlyPayment =\r\n    monthlyRatePct === 0\r\n      ? initial / years / 12\r\n      : (initial * monthlyRatePct) /\r\n        (1 - Math.pow(1 / (1 + monthlyRatePct), years * 12));\r\n  let balance = initial;\r\n  let baseline = initial;\r\n  let payments = [{ overpayment: 0, balance, baseline }];\r\n  let partial;\r\n\r\n  for (let year = 0; year < years; year++) {\r\n    let interestYearly = 0;\r\n    let overpaymentYearly = 0;\r\n    for (let month = 1; month <= 12; month++) {\r\n      const overpayment = overpayments\r\n        .filter(x => +x.year === year && +x.month === month)\r\n        .reduce((acc, val) => acc + +val.amount, 0);\r\n      let interestMonth = balance * monthlyRatePct;\r\n      interestYearly += interestMonth;\r\n      overpaymentYearly += overpayment;\r\n      balance -=\r\n        monthlyPayment + monthlyOverpayment + overpayment - interestMonth;\r\n      baseline -= monthlyPayment - baseline * monthlyRatePct;\r\n\r\n      if (balance <= 0) {\r\n        balance = 0;\r\n        if (partial === undefined && month !== 12) {\r\n          partial = month;\r\n        }\r\n      }\r\n    }\r\n\r\n    payments.push({\r\n      baseline,\r\n      interestYearly,\r\n      balance,\r\n      partial,\r\n      overpayment: overpaymentYearly + +monthlyOverpayment * (partial || 12)\r\n    });\r\n    if (partial) partial = 0;\r\n  }\r\n  return { monthlyPayment, payments };\r\n}\r\n"],"mappings":"AAAA,eAAe,SAASA,iBAAT,CACbC,OADa,EAEbC,KAFa,EAGbC,IAHa,EAIbC,kBAJa,EAMb;EAAA,IADAC,YACA,uEADe,EACf;EACA,IAAMC,cAAc,GAAGH,IAAI,GAAG,IAA9B;EACA,IAAMI,cAAc,GAClBD,cAAc,KAAK,CAAnB,GACIL,OAAO,GAAGC,KAAV,GAAkB,EADtB,GAEKD,OAAO,GAAGK,cAAX,IACC,IAAIE,IAAI,CAACC,GAAL,CAAS,KAAK,IAAIH,cAAT,CAAT,EAAmCJ,KAAK,GAAG,EAA3C,CADL,CAHN;EAKA,IAAIQ,OAAO,GAAGT,OAAd;EACA,IAAIU,QAAQ,GAAGV,OAAf;EACA,IAAIW,QAAQ,GAAG,CAAC;IAAEC,WAAW,EAAE,CAAf;IAAkBH,OAAO,EAAPA,OAAlB;IAA2BC,QAAQ,EAARA;EAA3B,CAAD,CAAf;EACA,IAAIG,OAAJ;;EAVA,2BAYSC,IAZT;IAaE,IAAIC,cAAc,GAAG,CAArB;IACA,IAAIC,iBAAiB,GAAG,CAAxB;;IAdF,6BAeWC,KAfX;MAgBI,IAAML,WAAW,GAAGR,YAAY,CAC7Bc,MADiB,CACV,UAAAC,CAAC;QAAA,OAAI,CAACA,CAAC,CAACL,IAAH,KAAYA,IAAZ,IAAoB,CAACK,CAAC,CAACF,KAAH,KAAaA,KAArC;MAAA,CADS,EAEjBG,MAFiB,CAEV,UAACC,GAAD,EAAMC,GAAN;QAAA,OAAcD,GAAG,GAAG,CAACC,GAAG,CAACC,MAAzB;MAAA,CAFU,EAEuB,CAFvB,CAApB;MAGA,IAAIC,aAAa,GAAGf,OAAO,GAAGJ,cAA9B;MACAU,cAAc,IAAIS,aAAlB;MACAR,iBAAiB,IAAIJ,WAArB;MACAH,OAAO,IACLH,cAAc,GAAGH,kBAAjB,GAAsCS,WAAtC,GAAoDY,aADtD;MAEAd,QAAQ,IAAIJ,cAAc,GAAGI,QAAQ,GAAGL,cAAxC;;MAEA,IAAII,OAAO,IAAI,CAAf,EAAkB;QAChBA,OAAO,GAAG,CAAV;;QACA,IAAII,OAAO,KAAKY,SAAZ,IAAyBR,KAAK,KAAK,EAAvC,EAA2C;UACzCJ,OAAO,GAAGI,KAAV;QACD;MACF;IA/BL;;IAeE,KAAK,IAAIA,KAAK,GAAG,CAAjB,EAAoBA,KAAK,IAAI,EAA7B,EAAiCA,KAAK,EAAtC,EAA0C;MAAA,OAAjCA,KAAiC;IAiBzC;;IAEDN,QAAQ,CAACe,IAAT,CAAc;MACZhB,QAAQ,EAARA,QADY;MAEZK,cAAc,EAAdA,cAFY;MAGZN,OAAO,EAAPA,OAHY;MAIZI,OAAO,EAAPA,OAJY;MAKZD,WAAW,EAAEI,iBAAiB,GAAG,CAACb,kBAAD,IAAuBU,OAAO,IAAI,EAAlC;IALrB,CAAd;IAOA,IAAIA,OAAJ,EAAaA,OAAO,GAAG,CAAV;EAzCf;;EAYA,KAAK,IAAIC,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGb,KAA1B,EAAiCa,IAAI,EAArC,EAAyC;IAAA,MAAhCA,IAAgC;EA8BxC;;EACD,OAAO;IAAER,cAAc,EAAdA,cAAF;IAAkBK,QAAQ,EAARA;EAAlB,CAAP;AACD"},"metadata":{},"sourceType":"module"}